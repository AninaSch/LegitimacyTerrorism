geom_line() + # connect averages (uses y)
geom_point(shape = 21, size = 5) + # add points for averages (uses y and fill for color)
theme_bw() + # style plot
labs(title = "My plot", x = "Time [h]", y = "OD600", color = "Condition") # add labels
print(p2)
p2 %+% filter(data.sum, !grepl("background", substrate), time.hrs < 25)
print(p2)
# This code chunk simply makes sure that all the libraries used here are installed, it will not be shown in the report (notice echo = FALSE).
packages <- c("readxl", "knitr", "tidyr", "dplyr", "ggplot2", "plotly")
if ( length(missing_pkgs <- setdiff(packages, rownames(installed.packages()))) > 0) {
message("Installing missing package(s): ", paste(missing_pkgs, collapse = ", "))
install.packages(missing_pkgs)
}
library(readxl) # fast excel reader
#library(googlesheets) # fast google spreadsheet reader (not used here but could be useful)
data.raw <- read_excel("example.xlsx", skip = 1)
library(knitr) # the package that renders R markdown and has some good additional functionality
kable(data.raw)
library(tidyr) # for restructuring data very easily
data.long <- data.raw %>% gather(sample, OD600, -Time)
# melt <- gather(raw, sample, OD600, -Time) # this would be identical without using %>%
library(dplyr, warn.conflicts = FALSE) # powerful for doing calculations on data (by group, etc.)
data.long <- data.long %>% mutate(time.hrs = as.numeric(Time - Time[1], units = "hours"))
library(ggplot2) # powerful plotting package for aesthetics driven plotting
p1 <-
ggplot(data.long) + # initiate plot
aes(x = time.hrs, y = OD600, color = sample) + # setup aesthetic mappings
geom_point(size = 5) # add points to plot
print(p1) # output plot
data.info <- read_excel("example.xlsx", sheet = "info")
kable(data.info)
data.all <- merge(data.long, data.info, by = "sample")
p1 %+% data.all %+% aes(color = substrate)
data.sum <- data.all %>%
group_by(time.hrs, substrate) %>%
summarize(
OD600.avg = mean(OD600),
OD600.min = min(OD600),
OD600.max = max(OD600))
data.sum %>% head() %>% kable() # show the first couple of lines
p2 <- ggplot(data.sum) + # initiate plot
aes(x = time.hrs, y = OD600.avg, ymin = OD600.min, ymax = OD600.max,
fill = substrate) + # setup global aesthetic mappings
geom_ribbon(alpha = 0.3) + # value range (uses ymin and ymax, and fill for color)
geom_line() + # connect averages (uses y)
geom_point(shape = 21, size = 5) + # add points for averages (uses y and fill for color)
theme_bw() + # style plot
labs(title = "My plot", x = "Time [h]", y = "OD600", color = "Condition") # add labels
print(p2)
p2 %+% filter(data.sum, !grepl("background", substrate), time.hrs < 25)
print(p2)
library(plotly, warn.conflicts = FALSE)
ggplotly(p1)
View(alcohol1)
help dnorm()
dnorm()?
?dnorm()
?dnorm
set.seed(3000)
xseq<-seq(-4,4,.01)
densities<-dnorm(xseq, 0,1)
cumulative<-pnorm(xseq, 0, 1)
randomdeviates<-rnorm(1000,0,1)
dnorm(x, mean(y), sd(y))
dnorm(0)
norm(0)
dnorm(0)*sqrt(2*pi)
dnorm(0,mean=4)
dnorm(0,mean=4,sd=10)
v <- c(0,1,2)
dnorm(v)
x <- seq(-20,20,by=.1)
y <- dnorm(x)
plot(x,y)
y <- dnorm(x,mean=2.5,sd=0.1)
plot(x,y)
# normal density distribution
x <- seq(-2, 3, 0.1)
y <-  dnorm(x)
plot (x,y)
y <- pnorm(x)
plot (x,y)
x <- seq (0,1, 0.1)
y <- qnorm(x)
plot (x,y)
# numbers randomly generated following the normal distribution
y <- rnorm(100)
plot (y)
?dbinom
dbinom(46:54, 100, 0.5)
plot (y)
?dbinom
y <-  dbinom(46:54, 100, 0.5)
plot (y)
y <-  dbinom(46:54, 100, 0.5)
plot (y)
y <-  dbinom(1:10, 100, 0.5)
plot (y)
first_fit <- lm(weight ~ height, data=women)
first_fit <- lm(weight ~ height, data=women)
summary(first_fit)
women$weight
fitted(fit)
residuals(fit)
plot(women$height,women$weight)
abline(fit)
women$weight
fitted(first_fit)
residuals(first_fit)
plot(women$height,women$weight)
abline(first_fit)
fit<-lm(mpg~(hp+wt+hp)^2, data =mtcars)
summary(fit)
fit<-lm(mpg~(hp*wt*hp)^2, data =mtcars)
summary(fit)
library(lme4)
politeness <- read.csv(file.choose())
head(politeness)
View(politeness)
which(is.na(politeness$frequency))
boxplot(frequency ~ attitude*gender, col=c("white","lightgrey"), politeness)
lmer(frequency ~ attitude, data=politeness)
data(Affairs, package="AER")
library(AER)
data(Affairs)
install.packages("AER")
data(Affairs, package="AER")
Affairs$ynaffair[Affairs$affairs == 0] <- 0
Affairs$ynaffair[Affairs$affairs > 0] <- 1
fit<- glm(ynaffair ~ gender + age+yearsmarried + children +religiousness + education + occupation + rating, data=Affairs, family=binomial())
a1 <- rep(1:4, each=2)
a2 <- rep(1:4, each=2)
A <- cbind(a1, a2)
a2 <- rep(1:4, each=2)
A <- cbind(a1, a2)
mean(A[,1])
mean(A[,2])
apply(A, 2, mean)
apply(A, 2, mean)
apply(A, 2, mean, na.rm = TRUE)
A[1,2] <- 1
A
cmeans <- apply(A,2, mean)
A-matrix(cmeans, nrow =4, ncol =2, byrow=2)
A-matrix(cmeans, nrow =4, ncol =2, byrow=TRUE)
A
cmeans <- apply(A,2, mean)
matrix(cmeans, nrow =4, ncol =2, byrow=TRUE)
sweep(A, n, cmeans, FUN= "-")
sweep(A, 2, cmeans, FUN= "-")
source('~/Desktop/NotesMath.R', echo=TRUE)
B <- matrix(1:4, ncol=2, nrow=2)
A %% diag(rep(2,2))
diag(rep(2,2))
A %*% diag(rep(2,2))
theta <- 60
theta2 <- (2*pi*theta)/360
theta
theta2
R <- matrix(c(cos(theta2), -sin(theta2), sin(theta2), cos(theta2), nrow=2, ncol=2, byrow=TRUE)
sweep(A, n, cmeans, FUN= "-")
theta
theta2
R <- matrix (c(cos(theta2), -sin(theta2), sin(theta2), cos(theta2), nrow=2, ncol=2, byrow=TRUE)
R <- matrix (c(cos(theta2), -sin(theta2), sin(theta2), cos(theta2), nrow=2, ncol=2, byrow=TRUE)
R <- matrix (c(cos(theta2), -sin(theta2), sin(theta2), cos(theta2), nrow=2, ncol=2, byrow=TRUE)
R <- matrix(c(cos(theta2), -sin(theta2), sin(theta2), cos(theta2), nrow=2, ncol=2, byrow=TRUE)
X <- matrix(c(0.7, 1.2, 0.25 0.8), ncol=2)
X <- matrix(c(0.7, 1.2, 0.25, 0.8), ncol=2)
R <- matrix(c(cos(theta2), -sin(theta2), sin(theta2), cos(theta2), nrow=2, ncol=2, byrow=TRUE))
X <- matrix(c(0.7, 1.2, 0.25, 0.8), ncol=2)
plot(0,0)
plot(0,0, type="n", xlim=c(-1.5,1.5), ylim=c(0,1.5))
arrows(0,0,1,1)
arrows(0,0,1,1,lwd=3,lenght=0.1)
plot(0,0, type="n", xlim=c(-1.5,1.5), ylim=c(0,1.5))
arrows(0,0, X[1,], X[2,], lwd=3)
Y <- R %*%X
arrows(0,0, Y[1,], X[2,], lwd=3, col="grey")
arrows(0,0, Y[1,], Y[2,], lwd=3, col="grey")
Y <- R %*%X
Y <- R%*%X
Y <- R %*% X
R <- matrix(c(cos(theta2), -sin(theta2), sin(theta2), cos(theta2), nrow=2, ncol=2, byrow=TRUE))
X <- matrix(c(0.7, 1.2, 0.25, 0.8), ncol=2)
arrows(0,0,1,1,lwd=3,lenght=0.1)
arrows(0,0, X[1,], X[2,], lwd=3)
arrows(0,0,1,1,lwd=3,length=0.1)
arrows(0,0, X[1,], X[2,], lwd=3)
X
Y <- R %*% X
arrows(0,0, Y[1,], Y[2,], lwd=3, col="grey")
plot(0,0, type="n", xlim=c(-1.5,1.5), ylim=c(0,1.5))
arrows(0,0, X[1,], X[2,], lwd=3)
Y <- R %*% X
R <- matrix(c(cos(theta2), -sin(theta2), sin(theta2), cos(theta2), nrow=2, ncol=2, byrow=TRUE))
X <- matrix(c(0.7, 1.2, 0.25, 0.8), ncol=2)
Y <- R %*% X
X <- matrix(c(0.7, 1.2, 0.25, 0.8), nrow=2, ncol=2)
Y <- R %*% X
u <- c(2,1)
u %*% t8u)
u %*% t(u)
t(u) %*% u
R <- matrix(c(cos(theta2), -sin(theta2), sin(theta2), cos(theta2), nrow=2, ncol=2, byrow=TRUE))
X <- matrix(c(0.7, 1.2, 0.25, 0.8), nrow=2, ncol=2, byrow=TRUE)
Y <- R %*% X
as.numeric(t(u) %*% u)
Pu <- u %*% t(u)
Pu
Pu <- u %*% t(u)
Pu
Pu <- u %*% t(u) / as.numeric(t(u) %*% u)
Pu
x <- c(2,2)
Pu %*% x
plot(0,0, type="n", xlim=c(0,4), ylim=c(0,3))
abline(0, 0.5, lwd=2, col="blue")
points(2.4,1.2, pch=14)
points(2.4,1.2, pch=16)
points(2,2)
locator(1)
points(x1[1], x1[2], col="red")
points(x1[1], x1[2], col="red")
x1 <- c(0.26,1.73)
points(x1[1], x1[2], col="red")
points(z1[1], z1[2], col="red")
z1 <- c(0.9,0.45)
points(z1[1], z1[2], col="red")
A <-  matrix(c(7,4,3,4,6,4,3,4,7), ncol=3)
A
Ae <- eigen(A)
Ae
Ae$values
Ae[[1]]
D <- diag(Ae$values)
D
V <- Ae$vectors
V %*% D %*% t(V)
A
B <-  matrix(c(-1, -1, 0, 1, 1, 1:10, (1:5)^2, ncol=4))
B
B <-  matrix(c(-1, -1, 0, 1, 1, 1:10, (1:5)^2), ncol=4)
B
Bs <-  svd(B)
Bs
Bs$u %*% diag(Bs$d) %*% t(Bs$v)
x <- seq(20, 50, 1)
y <-  (7000 - 400*x + 10*x^2)/3
plot(x,y,type="l")
y[2]-y[1]
diff(y)
plot (x[-1]], diff(y), type="l")
plot (x[-1], diff(y), type="l")
y <-(7000 - 400*x + 10*x^2)/3
delta <- 1
x <-  seq(20, 50, delta)
y <-(7000 - 400*x + 10*x^2)/3
plot (x[-1], diff(y), type="l")
abline(-400/3, 20/3, col=2)
abline(-400/3, 20/3, col=2)
delta <- 0.1
x <-  seq(20, 50, delta)
y <-(7000 - 400*x + 10*x^2)/3
plot (x[-1], diff(y), type="l")
# add theoretical derivative
abline(-400/3, 20/3, col=2)
delta <- 1
x <-  seq(20, 50, delta)
y <-(7000 - 400*x + 10*x^2)/3
plot (x[-1], diff(y), type="l")
abline(-400/3, 20/3, col=2)
delta <- 0.1
x <-  seq(20, 50, delta)
y <-(7000 - 400*x + 10*x^2)/3
plot (x[-1], diff(y)/delta, type="l")
abline(-400/3, 20/3, col=2)
f <-  function(x1,x2) {return(x1^3 - x2^2)}
x1 <- x2 <- seq(-2, 2 , length = 25)
Y <-  outer(x1, x2, f)
persp(x1, x2, Y)
abline(h=0)
abline(v=0)
pmat <- persp(x1, x2, Y, theta = -30)
pmat
p1 <- -0.5
p2 <- -3/4
p3 <- f(p1,p2)
p3
trans3d(p1,p2,p3,pmat)
points(trans3d(p1,p2,p3,pmat), col =2, pch= 16)
x <- seq(-4, 4, length = 500)
y <- dnorm(x)
plot(x, y, type ="l")
integrate(dnorm, 0, 1)
x <- seq(-4, 4, length = 500)
y <- dnorm(x)
integrate(dnorm, 0, 1)
polygon(c(-1, 1, 1, -1, -1), c(0.1, 0.1, 0.2, 0.2, 0.1))
polygon(c(-1, 1, 1, -1, -1), c(0.1, 0.1, 0.2, 0.2, 0.1), col="grey")
x0 <- c(0, seq(0,1,0,01), 1, 0)
x0 <- c(0, seq(0,1,0.01), 1, 0)
y0 <- c(0, dnorm(seq(0,1,0.1)), 0, 0)
polygon(x0, y0, col = "lightgray")
polygon(x0, y0, col = "lightgrey")
x0 <- c(0, seq(0,1,0.01), 1, 0)
y0 <- c(0, dnorm(seq(0,1,0.1)), 0, 0)
polygon(x0, y0, col = "lightgrey")
y0 <- c(0, dnorm(seq(0,1,0.1)), 0, 0)
x0 <- c(0, seq(0,1,0.01), 1, 0)
y0 <- c(0, dnorm(seq(0,1,0.01)), 0, 0)
polygon(x0, y0, col = "lightgrey")
x0 <- c(-2, seq(0,1,0.01), 2, -2)
y0 <- c(0, dnorm(seq(0,1,0.01)), 0, 0)
polygon(x0, y0, col = "blue")
polygon(c(-1, 1, 1, -1, -1), c(0.1, 0.1, 0.2, 0.2, 0.1), col="grey")
x0 <- c(0, seq(0,1,0.01), 1, 0)
y0 <- c(0, dnorm(seq(0,1,0.01)), 0, 0)
polygon(x0, y0, col = "lightgrey")
x0 <- c(-2, seq(0,1,0.01), 2, -2)
y0 <- c(0, dnorm(seq(0,1,0.01)), 0, 0)
x0 <- c(-2, seq(0,1,0.01), 2, -2)
y0 <- c(0, dnorm(seq(-2,2,0.01)), 0, 0)
polygon(x0, y0, col = "blue")
polygon(x0, y0, col = "blue")
integrate(dnorm, -2, 2)
pnorm(2) - pnorm(-2)
pnorm(2, 2, 1) - pnorm(-2, 2, 1)
install.packages("RSiena", repos="http://R-Forge.R-project.org")
install.packages("RSiena")
install.packages("RSiena", repos="http://R-Forge.R-project.org", (options(download.file.method = NULL)))
# if you don't have the RSiena package installed
# install it - from R-Forge! (the version at CRAN is older)
install.packages("RSiena", repos="http://R-Forge.R-project.org", options(download.file.method = NULL))
# if you don't have the RSiena package installed
# install it - from R-Forge! (the version at CRAN is older)
install.packages("RSiena", repos="http://R-Forge.R-project.org"), (options(download.file.method = NULL)))
?install.packages
install.packages("RSiena", repos = getOption("repos")[["http://R-Forge.R-project.org"]])
install.packages("RSiena", repos = getOption("repos")[["http://R-Forge.R-project.org"]]))
install.packages("RSiena", repos = getOption("http://R-Forge.R-project.org"))
install.packages("RSiena", options(download.file.method = NULL))
install.packages("RSiena")
# loading necessary packages
library(RSiena)
sienaAlgorithmCreate
install.packages("tm")
install.packages("reshape2")
install.packages("tidyverse")
library(tidyverse)
library(rio)
rio::import("/Users/schwarze/Documents/HARVARD/TechTogether")
rio::import(".../Users/schwarze/Documents/HARVARD/TechTogether")
rio::import("../Users/schwarze/Documents/HARVARD/TechTogether")
rio::import("../Users/schwarze/Documents/HARVARD/TechTogether/FY2019_4050_FMRs_rev2")
rio::import("../Users/schwarze/Documents/HARVARD/TechTogether/FY2019_4050_FMRs_rev2.xlsx")
rio::import("../TechTogether/FY2019_4050_FMRs_rev2.xlsx")
View(politeness)
View(fit)
View(first_fit)
rio::import("../TechTogether/FY2019_4050_FMRs_rev2.xlsx")
fairrent <- rio::import("../TechTogether/FY2019_4050_FMRs_rev2.xlsx")
View(fairrent)
WGI <- rio::import(/Users/schwarze/Documents/HARVARD/ZProject)
WGI <- rio::import("/Users/schwarze/Documents/HARVARD/ZProject/PIRCH/datensatz_anina")
WGI <- rio::import("/Users/schwarze/Documents/HARVARD/ZProject/PIRCH/datensatz_anina.sav")
View(WGI)
glimpse(WGI)
View(WGI)
setwd("~/Documents/GitHub/LegitimacyTerrorism/Scripts/Modelling")
legter <- rio::import("../../Data/Data for Modelling/LEGTER_ts_recode.dta") # for debugging
library(foreign)
legter <- rio::import("../../Data/Data for Modelling/LEGTER_ts_recode.dta") # for debugging
legter <- rio::import("../../Data/Data for Modelling/LEGTER_ts_recode.dta") # for debugging
m1 <- vglm(n_domtarg_events ~ lag1vdem_partip + lag1logGDPexp_capita + lag1logpop, family = pospoisson(), data = legter)
summary(m1)
install.packages("VGAM")
library(VGAM)
m1 <- vglm(n_domtarg_events ~ lag1vdem_partip + lag1logGDPexp_capita + lag1logpop, family = pospoisson(), data = legter)
legter_pos <- legter %>%
filter(n_domtarg_events>0)
library(tidyr)
legter_pos <- legter %>%
filter(n_domtarg_events>0)
legter_pos <- legter %>%
filter(n_domtarg_events>0)
glimpse(legter)
legter <- rio::import("../../Data/Data for Modelling/LEGTER_ts_recode.dta") # for debugging
legter_pos <- legter %>%
filter(n_domtarg_events>0)
library(tidyr)
library(tidyverse)
glimpse(legter)
legter_pos <- legter %>%
filter(n_domtarg_events>0)
m1 <- vglm(n_domtarg_events ~ lag1vdem_partip + lag1logGDPexp_capita + lag1logpop, family = pospoisson(), data = legter_pos)
summary(m1)
m1 <- vglm(n_domtarg_events ~ lag1vdem_partip + lag1logGDPexp_capita + lag1logpop + lag1any_conflict + lag1durable, family = pospoisson(), data = legter_pos)
summary(m1)
m1 <- vglm(n_domtarg_events ~ lag1vdem_partip + lag1logGDPexp_capita + lag1logpop + lag1any_conflict + lag1durable + yr1-yr18, family = pospoisson(), data = legter_pos)
summary(m1)
View(legter_pos)
years = c(yr1-yr18)
years = c("yr1"-"yr18")
years <-  select("yr1"-"yr18")
years <-  select("yr1","yr18")
years <-  select(yr1,yr18)
legter_pos %>%
mutate( years= select(yr1,yr18))
legter_pos %>%
select(yr1,yr18)
legter_pos %>%
mutate(years = select(yr1,yr18))
legter_pos %>%
years <- select(yr1,yr18)
years <- legter_pos %>%
select(yr1,yr18)
m1 <- vglm(n_domtarg_events ~ lag1vdem_partip + lag1logGDPexp_capita + lag1logpop + lag1any_conflict + lag1durable + years, family = pospoisson(), data = legter_pos)
colnames(yr1)
vglm?
?vglm
colnames(m1)
colnames(legter_pos)
colnames(legter_pos)[269:445]
# select all the columms that we want in the regression, so that we can use formula: Y~.
# great resource for dyplr::selec : https://www.r-bloggers.com/the-complete-catalog-of-argument-variations-of-select-in-dplyr/
legter_pos_selection <- legter_pos %>%
select(n_domtarg_events, lag1vdem_partip, lag1logGDPexp_capita, lag1logpop, lag1any_conflict, lag1durable,
starts_with("ctry"),
starts_with("yr"))
glimpse(legter_pos_selection)
m1 <- vglm(n_domtarg_events ~ . , family = pospoisson(), data = legter_pos_selection)
legter_pos <- legter %>%
filter(n_domtarg_events>0)
tab(legter_pos$n_domtarg_events)
table(legter_pos$n_domtarg_events)
# select all the columms that we want in the regression, so that we can use formula: Y~.
# great resource for dyplr::selec : https://www.r-bloggers.com/the-complete-catalog-of-argument-variations-of-select-in-dplyr/
legter_pos_selection <- legter_pos %>%
select(n_domtarg_events, lag1vdem_partip, lag1logGDPexp_capita, lag1logpop, lag1any_conflict, lag1durable,
starts_with("ctry"),
starts_with("yr"))
m1 <- vglm(n_domtarg_events ~ . , family = pospoisson(), data = legter_pos_selection)
# select all the columms that we want in the regression, so that we can use formula: Y~.
# great resource for dyplr::selec : https://www.r-bloggers.com/the-complete-catalog-of-argument-variations-of-select-in-dplyr/
legter_pos_selection <- legter_pos %>%
select(n_domtarg_events,
starts_with("ctry"),
starts_with("yr"))
m1 <- vglm(n_domtarg_events ~ . , family = pospoisson(), data = legter_pos_selection)
# select all the columms that we want in the regression, so that we can use formula: Y~.
# great resource for dyplr::selec : https://www.r-bloggers.com/the-complete-catalog-of-argument-variations-of-select-in-dplyr/
legter_pos_selection <- legter_pos %>%
select(n_domtarg_events,
starts_with("ctry"),
starts_with("yr"))
m1 <- vglm(n_domtarg_events ~ . , family = pospoisson(), data = legter_pos_selection)
sum(legter_pos_selection)
# select all the columms that we want in the regression, so that we can use formula: Y~.
# great resource for dyplr::selec : https://www.r-bloggers.com/the-complete-catalog-of-argument-variations-of-select-in-dplyr/
legter_pos_selection <- legter_pos %>%
select(# n_domtarg_events,
starts_with("ctry"),
starts_with("yr"))
sum(legter_pos_selection)
legter_pos_selection %>% summary()
# select all the columms that we want in the regression, so that we can use formula: Y~.
# great resource for dyplr::selec : https://www.r-bloggers.com/the-complete-catalog-of-argument-variations-of-select-in-dplyr/
legter_pos_selection <- legter_pos %>%
select(# n_domtarg_events,
# starts_with("ctry"),
starts_with("yr"))
legter_pos_selection %>% corr()
legter_pos_selection %>% cor()
legter_pos_selection %>% cor()
# select all the columms that we want in the regression, so that we can use formula: Y~.
# great resource for dyplr::selec : https://www.r-bloggers.com/the-complete-catalog-of-argument-variations-of-select-in-dplyr/
legter_pos_selection <- legter_pos %>%
# select all the columms that we want in the regression, so that we can use formula: Y~.
# great resource for dyplr::selec : https://www.r-bloggers.com/the-complete-catalog-of-argument-variations-of-select-in-dplyr/
legter_pos_selection <- legter_pos %>%
# select all the columms that we want in the regression, so that we can use formula: Y~.
# great resource for dyplr::selec : https://www.r-bloggers.com/the-complete-catalog-of-argument-variations-of-select-in-dplyr/
legter_pos_selection <- legter_pos %>%
select(n_domtarg_events,
# starts_with("ctry"),
starts_with("yr"))
m1 <- vglm(n_domtarg_events ~ . , family = pospoisson(), data = legter_pos_selection)
# select all the columms that we want in the regression, so that we can use formula: Y~.
# great resource for dyplr::selec : https://www.r-bloggers.com/the-complete-catalog-of-argument-variations-of-select-in-dplyr/
legter_pos_selection <- legter_pos %>%
select(n_domtarg_events,
# starts_with("ctry"),
starts_with("yr"))
m1 <- vglm(n_domtarg_events ~ . , family = pospoisson(), data = legter_pos_selection)
View(legter_pos_selection)
colnames(legter_pos)
# select all the columms that we want in the regression, so that we can use formula: Y~.
# great resource for dyplr::selec : https://www.r-bloggers.com/the-complete-catalog-of-argument-variations-of-select-in-dplyr/
legter_pos_selection <- legter_pos %>%
select(n_domtarg_events,
starts_with("ctry"))
m1 <- vglm(n_domtarg_events ~ . , family = pospoisson(), data = legter_pos_selection)
# select all the columms that we want in the regression, so that we can use formula: Y~.
# great resource for dyplr::selec : https://www.r-bloggers.com/the-complete-catalog-of-argument-variations-of-select-in-dplyr/
legter_pos_selection <- legter_pos %>%
select(n_domtarg_events, lag1vdem_partip, lag1logGDPexp_capita, lag1logpop, lag1any_conflict, lag1durable, yr1, yr2, yr3,ctry1, ctry2, ctry3)
# select all the columms that we want in the regression, so that we can use formula: Y~.
# great resource for dyplr::selec : https://www.r-bloggers.com/the-complete-catalog-of-argument-variations-of-select-in-dplyr/
legter_pos_selection <- legter_pos %>%
select(n_domtarg_events, lag1vdem_partip, lag1logGDPexp_capita, lag1logpop, lag1any_conflict, lag1durable, yr1, yr2, yr3,ctry1, ctry2, ctry3)
m1 <- vglm(n_domtarg_events ~ . , family = pospoisson(), data = legter_pos_selection)
