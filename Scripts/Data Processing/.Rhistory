dnorm(0)
norm(0)
dnorm(0)*sqrt(2*pi)
dnorm(0,mean=4)
dnorm(0,mean=4,sd=10)
v <- c(0,1,2)
dnorm(v)
x <- seq(-20,20,by=.1)
y <- dnorm(x)
plot(x,y)
y <- dnorm(x,mean=2.5,sd=0.1)
plot(x,y)
# normal density distribution
x <- seq(-2, 3, 0.1)
y <-  dnorm(x)
plot (x,y)
y <- pnorm(x)
plot (x,y)
x <- seq (0,1, 0.1)
y <- qnorm(x)
plot (x,y)
# numbers randomly generated following the normal distribution
y <- rnorm(100)
plot (y)
?dbinom
dbinom(46:54, 100, 0.5)
plot (y)
?dbinom
y <-  dbinom(46:54, 100, 0.5)
plot (y)
y <-  dbinom(46:54, 100, 0.5)
plot (y)
y <-  dbinom(1:10, 100, 0.5)
plot (y)
first_fit <- lm(weight ~ height, data=women)
first_fit <- lm(weight ~ height, data=women)
summary(first_fit)
women$weight
fitted(fit)
residuals(fit)
plot(women$height,women$weight)
abline(fit)
women$weight
fitted(first_fit)
residuals(first_fit)
plot(women$height,women$weight)
abline(first_fit)
fit<-lm(mpg~(hp+wt+hp)^2, data =mtcars)
summary(fit)
fit<-lm(mpg~(hp*wt*hp)^2, data =mtcars)
summary(fit)
library(lme4)
politeness <- read.csv(file.choose())
head(politeness)
View(politeness)
which(is.na(politeness$frequency))
boxplot(frequency ~ attitude*gender, col=c("white","lightgrey"), politeness)
lmer(frequency ~ attitude, data=politeness)
data(Affairs, package="AER")
library(AER)
data(Affairs)
install.packages("AER")
data(Affairs, package="AER")
Affairs$ynaffair[Affairs$affairs == 0] <- 0
Affairs$ynaffair[Affairs$affairs > 0] <- 1
fit<- glm(ynaffair ~ gender + age+yearsmarried + children +religiousness + education + occupation + rating, data=Affairs, family=binomial())
a1 <- rep(1:4, each=2)
a2 <- rep(1:4, each=2)
A <- cbind(a1, a2)
a2 <- rep(1:4, each=2)
A <- cbind(a1, a2)
mean(A[,1])
mean(A[,2])
apply(A, 2, mean)
apply(A, 2, mean)
apply(A, 2, mean, na.rm = TRUE)
A[1,2] <- 1
A
cmeans <- apply(A,2, mean)
A-matrix(cmeans, nrow =4, ncol =2, byrow=2)
A-matrix(cmeans, nrow =4, ncol =2, byrow=TRUE)
A
cmeans <- apply(A,2, mean)
matrix(cmeans, nrow =4, ncol =2, byrow=TRUE)
sweep(A, n, cmeans, FUN= "-")
sweep(A, 2, cmeans, FUN= "-")
source('~/Desktop/NotesMath.R', echo=TRUE)
B <- matrix(1:4, ncol=2, nrow=2)
A %% diag(rep(2,2))
diag(rep(2,2))
A %*% diag(rep(2,2))
theta <- 60
theta2 <- (2*pi*theta)/360
theta
theta2
R <- matrix(c(cos(theta2), -sin(theta2), sin(theta2), cos(theta2), nrow=2, ncol=2, byrow=TRUE)
sweep(A, n, cmeans, FUN= "-")
theta
theta2
R <- matrix (c(cos(theta2), -sin(theta2), sin(theta2), cos(theta2), nrow=2, ncol=2, byrow=TRUE)
R <- matrix (c(cos(theta2), -sin(theta2), sin(theta2), cos(theta2), nrow=2, ncol=2, byrow=TRUE)
R <- matrix (c(cos(theta2), -sin(theta2), sin(theta2), cos(theta2), nrow=2, ncol=2, byrow=TRUE)
R <- matrix(c(cos(theta2), -sin(theta2), sin(theta2), cos(theta2), nrow=2, ncol=2, byrow=TRUE)
X <- matrix(c(0.7, 1.2, 0.25 0.8), ncol=2)
X <- matrix(c(0.7, 1.2, 0.25, 0.8), ncol=2)
R <- matrix(c(cos(theta2), -sin(theta2), sin(theta2), cos(theta2), nrow=2, ncol=2, byrow=TRUE))
X <- matrix(c(0.7, 1.2, 0.25, 0.8), ncol=2)
plot(0,0)
plot(0,0, type="n", xlim=c(-1.5,1.5), ylim=c(0,1.5))
arrows(0,0,1,1)
arrows(0,0,1,1,lwd=3,lenght=0.1)
plot(0,0, type="n", xlim=c(-1.5,1.5), ylim=c(0,1.5))
arrows(0,0, X[1,], X[2,], lwd=3)
Y <- R %*%X
arrows(0,0, Y[1,], X[2,], lwd=3, col="grey")
arrows(0,0, Y[1,], Y[2,], lwd=3, col="grey")
Y <- R %*%X
Y <- R%*%X
Y <- R %*% X
R <- matrix(c(cos(theta2), -sin(theta2), sin(theta2), cos(theta2), nrow=2, ncol=2, byrow=TRUE))
X <- matrix(c(0.7, 1.2, 0.25, 0.8), ncol=2)
arrows(0,0,1,1,lwd=3,lenght=0.1)
arrows(0,0, X[1,], X[2,], lwd=3)
arrows(0,0,1,1,lwd=3,length=0.1)
arrows(0,0, X[1,], X[2,], lwd=3)
X
Y <- R %*% X
arrows(0,0, Y[1,], Y[2,], lwd=3, col="grey")
plot(0,0, type="n", xlim=c(-1.5,1.5), ylim=c(0,1.5))
arrows(0,0, X[1,], X[2,], lwd=3)
Y <- R %*% X
R <- matrix(c(cos(theta2), -sin(theta2), sin(theta2), cos(theta2), nrow=2, ncol=2, byrow=TRUE))
X <- matrix(c(0.7, 1.2, 0.25, 0.8), ncol=2)
Y <- R %*% X
X <- matrix(c(0.7, 1.2, 0.25, 0.8), nrow=2, ncol=2)
Y <- R %*% X
u <- c(2,1)
u %*% t8u)
u %*% t(u)
t(u) %*% u
R <- matrix(c(cos(theta2), -sin(theta2), sin(theta2), cos(theta2), nrow=2, ncol=2, byrow=TRUE))
X <- matrix(c(0.7, 1.2, 0.25, 0.8), nrow=2, ncol=2, byrow=TRUE)
Y <- R %*% X
as.numeric(t(u) %*% u)
Pu <- u %*% t(u)
Pu
Pu <- u %*% t(u)
Pu
Pu <- u %*% t(u) / as.numeric(t(u) %*% u)
Pu
x <- c(2,2)
Pu %*% x
plot(0,0, type="n", xlim=c(0,4), ylim=c(0,3))
abline(0, 0.5, lwd=2, col="blue")
points(2.4,1.2, pch=14)
points(2.4,1.2, pch=16)
points(2,2)
locator(1)
points(x1[1], x1[2], col="red")
points(x1[1], x1[2], col="red")
x1 <- c(0.26,1.73)
points(x1[1], x1[2], col="red")
points(z1[1], z1[2], col="red")
z1 <- c(0.9,0.45)
points(z1[1], z1[2], col="red")
A <-  matrix(c(7,4,3,4,6,4,3,4,7), ncol=3)
A
Ae <- eigen(A)
Ae
Ae$values
Ae[[1]]
D <- diag(Ae$values)
D
V <- Ae$vectors
V %*% D %*% t(V)
A
B <-  matrix(c(-1, -1, 0, 1, 1, 1:10, (1:5)^2, ncol=4))
B
B <-  matrix(c(-1, -1, 0, 1, 1, 1:10, (1:5)^2), ncol=4)
B
Bs <-  svd(B)
Bs
Bs$u %*% diag(Bs$d) %*% t(Bs$v)
x <- seq(20, 50, 1)
y <-  (7000 - 400*x + 10*x^2)/3
plot(x,y,type="l")
y[2]-y[1]
diff(y)
plot (x[-1]], diff(y), type="l")
plot (x[-1], diff(y), type="l")
y <-(7000 - 400*x + 10*x^2)/3
delta <- 1
x <-  seq(20, 50, delta)
y <-(7000 - 400*x + 10*x^2)/3
plot (x[-1], diff(y), type="l")
abline(-400/3, 20/3, col=2)
abline(-400/3, 20/3, col=2)
delta <- 0.1
x <-  seq(20, 50, delta)
y <-(7000 - 400*x + 10*x^2)/3
plot (x[-1], diff(y), type="l")
# add theoretical derivative
abline(-400/3, 20/3, col=2)
delta <- 1
x <-  seq(20, 50, delta)
y <-(7000 - 400*x + 10*x^2)/3
plot (x[-1], diff(y), type="l")
abline(-400/3, 20/3, col=2)
delta <- 0.1
x <-  seq(20, 50, delta)
y <-(7000 - 400*x + 10*x^2)/3
plot (x[-1], diff(y)/delta, type="l")
abline(-400/3, 20/3, col=2)
f <-  function(x1,x2) {return(x1^3 - x2^2)}
x1 <- x2 <- seq(-2, 2 , length = 25)
Y <-  outer(x1, x2, f)
persp(x1, x2, Y)
abline(h=0)
abline(v=0)
pmat <- persp(x1, x2, Y, theta = -30)
pmat
p1 <- -0.5
p2 <- -3/4
p3 <- f(p1,p2)
p3
trans3d(p1,p2,p3,pmat)
points(trans3d(p1,p2,p3,pmat), col =2, pch= 16)
x <- seq(-4, 4, length = 500)
y <- dnorm(x)
plot(x, y, type ="l")
integrate(dnorm, 0, 1)
x <- seq(-4, 4, length = 500)
y <- dnorm(x)
integrate(dnorm, 0, 1)
polygon(c(-1, 1, 1, -1, -1), c(0.1, 0.1, 0.2, 0.2, 0.1))
polygon(c(-1, 1, 1, -1, -1), c(0.1, 0.1, 0.2, 0.2, 0.1), col="grey")
x0 <- c(0, seq(0,1,0,01), 1, 0)
x0 <- c(0, seq(0,1,0.01), 1, 0)
y0 <- c(0, dnorm(seq(0,1,0.1)), 0, 0)
polygon(x0, y0, col = "lightgray")
polygon(x0, y0, col = "lightgrey")
x0 <- c(0, seq(0,1,0.01), 1, 0)
y0 <- c(0, dnorm(seq(0,1,0.1)), 0, 0)
polygon(x0, y0, col = "lightgrey")
y0 <- c(0, dnorm(seq(0,1,0.1)), 0, 0)
x0 <- c(0, seq(0,1,0.01), 1, 0)
y0 <- c(0, dnorm(seq(0,1,0.01)), 0, 0)
polygon(x0, y0, col = "lightgrey")
x0 <- c(-2, seq(0,1,0.01), 2, -2)
y0 <- c(0, dnorm(seq(0,1,0.01)), 0, 0)
polygon(x0, y0, col = "blue")
polygon(c(-1, 1, 1, -1, -1), c(0.1, 0.1, 0.2, 0.2, 0.1), col="grey")
x0 <- c(0, seq(0,1,0.01), 1, 0)
y0 <- c(0, dnorm(seq(0,1,0.01)), 0, 0)
polygon(x0, y0, col = "lightgrey")
x0 <- c(-2, seq(0,1,0.01), 2, -2)
y0 <- c(0, dnorm(seq(0,1,0.01)), 0, 0)
x0 <- c(-2, seq(0,1,0.01), 2, -2)
y0 <- c(0, dnorm(seq(-2,2,0.01)), 0, 0)
polygon(x0, y0, col = "blue")
polygon(x0, y0, col = "blue")
integrate(dnorm, -2, 2)
pnorm(2) - pnorm(-2)
pnorm(2, 2, 1) - pnorm(-2, 2, 1)
install.packages("RSiena", repos="http://R-Forge.R-project.org")
install.packages("RSiena")
install.packages("RSiena", repos="http://R-Forge.R-project.org", (options(download.file.method = NULL)))
# if you don't have the RSiena package installed
# install it - from R-Forge! (the version at CRAN is older)
install.packages("RSiena", repos="http://R-Forge.R-project.org", options(download.file.method = NULL))
# if you don't have the RSiena package installed
# install it - from R-Forge! (the version at CRAN is older)
install.packages("RSiena", repos="http://R-Forge.R-project.org"), (options(download.file.method = NULL)))
?install.packages
install.packages("RSiena", repos = getOption("repos")[["http://R-Forge.R-project.org"]])
install.packages("RSiena", repos = getOption("repos")[["http://R-Forge.R-project.org"]]))
install.packages("RSiena", repos = getOption("http://R-Forge.R-project.org"))
install.packages("RSiena", options(download.file.method = NULL))
install.packages("RSiena")
# loading necessary packages
library(RSiena)
sienaAlgorithmCreate
install.packages("tm")
install.packages("reshape2")
install.packages("tidyverse")
library(tidyverse)
library(rio)
rio::import("/Users/schwarze/Documents/HARVARD/TechTogether")
rio::import(".../Users/schwarze/Documents/HARVARD/TechTogether")
rio::import("../Users/schwarze/Documents/HARVARD/TechTogether")
rio::import("../Users/schwarze/Documents/HARVARD/TechTogether/FY2019_4050_FMRs_rev2")
rio::import("../Users/schwarze/Documents/HARVARD/TechTogether/FY2019_4050_FMRs_rev2.xlsx")
rio::import("../TechTogether/FY2019_4050_FMRs_rev2.xlsx")
View(politeness)
View(fit)
View(first_fit)
rio::import("../TechTogether/FY2019_4050_FMRs_rev2.xlsx")
fairrent <- rio::import("../TechTogether/FY2019_4050_FMRs_rev2.xlsx")
View(fairrent)
WGI <- rio::import(/Users/schwarze/Documents/HARVARD/ZProject)
WGI <- rio::import("/Users/schwarze/Documents/HARVARD/ZProject/PIRCH/datensatz_anina")
WGI <- rio::import("/Users/schwarze/Documents/HARVARD/ZProject/PIRCH/datensatz_anina.sav")
View(WGI)
glimpse(WGI)
View(WGI)
library(tidyverse)
# library(foreign)
source("Other functions/clean_countries.R") # function to clean country names
# --- 1. Load Processed Datasets
GTD <- readRDS("../../Data/Processed Data/GTD_tidy.rds")
polity <- readRDS("../../Data/Processed Data/polity_tidy.rds")
PENN <- readRDS("../../Data/Processed Data/PENN_tidy.rds")
PRIO <- readRDS("../../Data/Processed Data/Prio_tidy.rds")
WGI <- readRDS("../../Data/Processed Data/WGI_tidy.rds")
WVS <- readRDS("../../Data/Processed Data/WVS_tidy_wave456.rds")
Fragility <- readRDS("../../Data/Processed Data/Fragility_tidy.rds")
HIEF <- readRDS("../../Data/Processed Data/HIEF_tidy.rds")
WDI <- readRDS("../../Data/Processed Data/WDI_tidy.rds")
Vdem <- readRDS("../../Data/Processed Data/Vdem_tidy.rds")
ELRF <- readRDS("../../Data/Processed Data/ELRF_tidy.rds")
Gallup <- readRDS("../../Data/Processed Data/Gallup_tidy.rds")
IMF  <- readRDS("../../Data/Processed Data/IMF_tidy.rds")
WHIV  <- readRDS("../../Data/Processed Data/WHIV_tidy.rds")
IGM  <- readRDS("../../Data/Processed Data/IGM_tidy.rds")
QoG_ts  <- readRDS("../../Data/Processed Data/QoG_ts_tidy.rds")
QoG_cs  <- readRDS("../../Data/Processed Data/QoG_cs_tidy.rds")
# --- 2. Clean Countries Before Merging
path_to_country_dictionary = "../../Data/Processed Data/To Clean Countries/countries.csv"
GTD <- clean_countries(GTD, path_to_country_dictionary)
polity <- clean_countries(polity, path_to_country_dictionary)
PENN <- clean_countries(PENN, path_to_country_dictionary)
PRIO <- clean_countries(PRIO, path_to_country_dictionary)
WGI <- clean_countries(WGI, path_to_country_dictionary)
WVS <- clean_countries(WVS, path_to_country_dictionary)
Fragility <- clean_countries(Fragility, path_to_country_dictionary)
WDI <- clean_countries(WDI, path_to_country_dictionary) # check conuntries labelling
HIEF <- clean_countries(HIEF, path_to_country_dictionary)
Vdem <- clean_countries(Vdem, path_to_country_dictionary)
ELRF <- clean_countries(ELRF, path_to_country_dictionary)
Gallup <- clean_countries(Gallup, path_to_country_dictionary)
IMF <- clean_countries(IMF, path_to_country_dictionary)
WHIV <- clean_countries(WHIV, path_to_country_dictionary)
IGM <- clean_countries(IGM, path_to_country_dictionary)
QoG_ts <- clean_countries(QoG_ts, path_to_country_dictionary)
QoG_cs <- clean_countries(QoG_cs, path_to_country_dictionary)
# --- 3. Merging Datasets Polity_Penn_Prio
# --- we start by merging polity to GTD:
# we do an left join, as we do not want countries that are not in the GTD (true? we could also set n_events to 0 for those?)
GTD_polity <- left_join(GTD, polity, by = c("consolidated_country", "year")) %>%
arrange(consolidated_country) # set order by country, for aesthetics and readability
# --- then we merge PENN to GTD_polity:
GTD_polity_PENN <- left_join(GTD_polity, PENN, by = c("consolidated_country", "year"))
# --- then we merge PRIO to GTD_polity_PENN:
GTD_polity_PENN_PRIO <- left_join(GTD_polity_PENN, PRIO, by = c("consolidated_country", "year"))
# because PRIO has only countries in wars, we need to complete the missing values with 0:
GTD_polity_PENN_PRIO <- GTD_polity_PENN_PRIO %>%
replace_na(list(type_of_conflict_1=0, type_of_conflict_2=0,
type_of_conflict_3=0, type_of_conflict_4=0, any_conflict=0))
# --- then we merge WGI to GTD_polity_PENN_PRIO:
GTD_polity_PENN_PRIO_WGI <- left_join(GTD_polity_PENN_PRIO, WGI, by = c("consolidated_country", "year"))
# some duplicate were created, because in some datasets, some year-country combinations happen twice
GTD_polity_PENN_PRIO_WGI <- GTD_polity_PENN_PRIO_WGI %>% distinct()
# --- then we merge WVS to GTD_polity_PENN_PRIO_WGI:
GTD_polity_PENN_PRIO_WGI_WVS <- left_join(GTD_polity_PENN_PRIO_WGI, WVS, by = c("consolidated_country"))
# # take years after 2000: (quick dirty fix for the temporary countries):
# GTD_polity_PENN_PRIO_WGI <- GTD_polity_PENN_PRIO_WGI %>%
#   filter(year > 1999)
# GTD_polity_PENN_PRIO_WGI_WVS <- GTD_polity_PENN_PRIO_WGI_WVS %>%
#   filter(year > 1999)
# --- then we merge Fragility to GTD_polity_PENN_PRIO_WGI_WVS:
GTD_polity_PENN_PRIO_WGI_WVS_Fragility <- left_join(GTD_polity_PENN_PRIO_WGI_WVS, Fragility, by = c("consolidated_country", "year"))
# --- then we merge WDI to GTD_polity_PENN_PRIO_WGI_WVS_Fragility:
GTD_polity_PENN_PRIO_WGI_WVS_Fragility_WDI <- left_join(GTD_polity_PENN_PRIO_WGI_WVS_Fragility, WDI, by = c("consolidated_country", "year"))
# --- then we merge HIEF to GTD_polity_PENN_PRIO_WGI_WVS_Fragility_WDI:
GTD_polity_PENN_PRIO_WGI_WVS_Fragility_WDI_HIEF <- left_join(GTD_polity_PENN_PRIO_WGI_WVS_Fragility_WDI, HIEF, by = c("consolidated_country", "year"))
GTD_polity_PENN_PRIO_WGI_WVS_Fragility_WDI_HIEF <- GTD_polity_PENN_PRIO_WGI_WVS_Fragility_WDI_HIEF %>% distinct()
# --- then we merge Vdem to GTD_polity_PENN_PRIO_WGI_WVS_Fragility_WDI_HIEF:
GTD_polity_PENN_PRIO_WGI_WVS_Fragility_WDI_HIEF_Vdem <- left_join(GTD_polity_PENN_PRIO_WGI_WVS_Fragility_WDI_HIEF, Vdem, by = c("consolidated_country", "year"))
# --- then we merge ELRF to GTD_polity_PENN_PRIO_WGI_WVS_Fragility_WDI_HIEF_Vdem:
GTD_polity_PENN_PRIO_WGI_WVS_Fragility_WDI_HIEF_Vdem_ELRF <- left_join(GTD_polity_PENN_PRIO_WGI_WVS_Fragility_WDI_HIEF_Vdem, ELRF, by = c("consolidated_country"))
# --- then we merge Gallup to GTD_polity_PENN_PRIO_WGI_WVS_Fragility_WDI_HIEF_Vdem_ELRF:
GTD_polity_PENN_PRIO_WGI_WVS_Fragility_WDI_HIEF_Vdem_ELRF_Gallup <- left_join(GTD_polity_PENN_PRIO_WGI_WVS_Fragility_WDI_HIEF_Vdem_ELRF, Gallup, by = c("consolidated_country"))
# --- then we merge IMF to GTD_polity_PENN_PRIO_WGI_WVS_Fragility_WDI_HIEF_Vdem_ELRF_Gallup:
# year is character, it should be numeric for the join
IMF <- IMF %>%
mutate(year=as.numeric(year), tax_revenue=as.numeric(tax_revenue))
GTD_polity_PENN_PRIO_WGI_WVS_Fragility_WDI_HIEF_Vdem_ELRF_Gallup_IMF <- left_join(GTD_polity_PENN_PRIO_WGI_WVS_Fragility_WDI_HIEF_Vdem_ELRF_Gallup, IMF, by = c("consolidated_country", "year"))
# --- then we merge WHIV to GTD_polity_PENN_PRIO_WGI_WVS_Fragility_WDI_HIEF_Vdem_ELRF_Gallup_IMF:
GTD_polity_PENN_PRIO_WGI_WVS_Fragility_WDI_HIEF_Vdem_ELRF_Gallup_IMF_WHIV <- left_join(GTD_polity_PENN_PRIO_WGI_WVS_Fragility_WDI_HIEF_Vdem_ELRF_Gallup_IMF, WHIV, by = c("consolidated_country", "year"))
# --- then we merge IGM to GTD_polity_PENN_PRIO_WGI_WVS_Fragility_WDI_HIEF_Vdem_ELRF_Gallup_IMF_WHIV:
GTD_polity_PENN_PRIO_WGI_WVS_Fragility_WDI_HIEF_Vdem_ELRF_Gallup_IMF_WHIV_IGM <- left_join(GTD_polity_PENN_PRIO_WGI_WVS_Fragility_WDI_HIEF_Vdem_ELRF_Gallup_IMF_WHIV, IGM, by = c("consolidated_country"))
# --- then we merge QoG timeseries to GTD_polity_PENN_PRIO_WGI_WVS_Fragility_WDI_HIEF_Vdem_ELRF_Gallup_IMF_WHIF_IGM to build:
LEGTER_ts <- left_join(GTD_polity_PENN_PRIO_WGI_WVS_Fragility_WDI_HIEF_Vdem_ELRF_Gallup_IMF_WHIV_IGM, QoG_ts, by = c("consolidated_country", "year"))
setwd("~/Documents/GitHub/LegitimacyTerrorism/Scripts/Data Processing")
library(tidyverse)
# library(foreign)
source("Other functions/clean_countries.R") # function to clean country names
# --- 1. Load Processed Datasets
GTD <- readRDS("../../Data/Processed Data/GTD_tidy.rds")
polity <- readRDS("../../Data/Processed Data/polity_tidy.rds")
PENN <- readRDS("../../Data/Processed Data/PENN_tidy.rds")
PRIO <- readRDS("../../Data/Processed Data/Prio_tidy.rds")
WGI <- readRDS("../../Data/Processed Data/WGI_tidy.rds")
WVS <- readRDS("../../Data/Processed Data/WVS_tidy_wave456.rds")
Fragility <- readRDS("../../Data/Processed Data/Fragility_tidy.rds")
HIEF <- readRDS("../../Data/Processed Data/HIEF_tidy.rds")
WDI <- readRDS("../../Data/Processed Data/WDI_tidy.rds")
Vdem <- readRDS("../../Data/Processed Data/Vdem_tidy.rds")
ELRF <- readRDS("../../Data/Processed Data/ELRF_tidy.rds")
Gallup <- readRDS("../../Data/Processed Data/Gallup_tidy.rds")
IMF  <- readRDS("../../Data/Processed Data/IMF_tidy.rds")
WHIV  <- readRDS("../../Data/Processed Data/WHIV_tidy.rds")
IGM  <- readRDS("../../Data/Processed Data/IGM_tidy.rds")
QoG_ts  <- readRDS("../../Data/Processed Data/QoG_ts_tidy.rds")
QoG_cs  <- readRDS("../../Data/Processed Data/QoG_cs_tidy.rds")
# --- 2. Clean Countries Before Merging
path_to_country_dictionary = "../../Data/Processed Data/To Clean Countries/countries.csv"
GTD <- clean_countries(GTD, path_to_country_dictionary)
polity <- clean_countries(polity, path_to_country_dictionary)
PENN <- clean_countries(PENN, path_to_country_dictionary)
PRIO <- clean_countries(PRIO, path_to_country_dictionary)
WGI <- clean_countries(WGI, path_to_country_dictionary)
WVS <- clean_countries(WVS, path_to_country_dictionary)
Fragility <- clean_countries(Fragility, path_to_country_dictionary)
WDI <- clean_countries(WDI, path_to_country_dictionary) # check conuntries labelling
HIEF <- clean_countries(HIEF, path_to_country_dictionary)
Vdem <- clean_countries(Vdem, path_to_country_dictionary)
ELRF <- clean_countries(ELRF, path_to_country_dictionary)
Gallup <- clean_countries(Gallup, path_to_country_dictionary)
IMF <- clean_countries(IMF, path_to_country_dictionary)
WHIV <- clean_countries(WHIV, path_to_country_dictionary)
IGM <- clean_countries(IGM, path_to_country_dictionary)
QoG_ts <- clean_countries(QoG_ts, path_to_country_dictionary)
QoG_cs <- clean_countries(QoG_cs, path_to_country_dictionary)
# --- 3. Merging Datasets Polity_Penn_Prio
# --- we start by merging polity to GTD:
# we do an left join, as we do not want countries that are not in the GTD (true? we could also set n_events to 0 for those?)
GTD_polity <- left_join(GTD, polity, by = c("consolidated_country", "year")) %>%
arrange(consolidated_country) # set order by country, for aesthetics and readability
# --- then we merge PENN to GTD_polity:
GTD_polity_PENN <- left_join(GTD_polity, PENN, by = c("consolidated_country", "year"))
# --- then we merge PRIO to GTD_polity_PENN:
GTD_polity_PENN_PRIO <- left_join(GTD_polity_PENN, PRIO, by = c("consolidated_country", "year"))
# because PRIO has only countries in wars, we need to complete the missing values with 0:
GTD_polity_PENN_PRIO <- GTD_polity_PENN_PRIO %>%
replace_na(list(type_of_conflict_1=0, type_of_conflict_2=0,
type_of_conflict_3=0, type_of_conflict_4=0, any_conflict=0))
# --- then we merge WGI to GTD_polity_PENN_PRIO:
GTD_polity_PENN_PRIO_WGI <- left_join(GTD_polity_PENN_PRIO, WGI, by = c("consolidated_country", "year"))
# some duplicate were created, because in some datasets, some year-country combinations happen twice
GTD_polity_PENN_PRIO_WGI <- GTD_polity_PENN_PRIO_WGI %>% distinct()
# --- then we merge WVS to GTD_polity_PENN_PRIO_WGI:
GTD_polity_PENN_PRIO_WGI_WVS <- left_join(GTD_polity_PENN_PRIO_WGI, WVS, by = c("consolidated_country"))
# # take years after 2000: (quick dirty fix for the temporary countries):
# GTD_polity_PENN_PRIO_WGI <- GTD_polity_PENN_PRIO_WGI %>%
#   filter(year > 1999)
# GTD_polity_PENN_PRIO_WGI_WVS <- GTD_polity_PENN_PRIO_WGI_WVS %>%
#   filter(year > 1999)
# --- then we merge Fragility to GTD_polity_PENN_PRIO_WGI_WVS:
GTD_polity_PENN_PRIO_WGI_WVS_Fragility <- left_join(GTD_polity_PENN_PRIO_WGI_WVS, Fragility, by = c("consolidated_country", "year"))
# --- then we merge WDI to GTD_polity_PENN_PRIO_WGI_WVS_Fragility:
GTD_polity_PENN_PRIO_WGI_WVS_Fragility_WDI <- left_join(GTD_polity_PENN_PRIO_WGI_WVS_Fragility, WDI, by = c("consolidated_country", "year"))
# --- then we merge HIEF to GTD_polity_PENN_PRIO_WGI_WVS_Fragility_WDI:
GTD_polity_PENN_PRIO_WGI_WVS_Fragility_WDI_HIEF <- left_join(GTD_polity_PENN_PRIO_WGI_WVS_Fragility_WDI, HIEF, by = c("consolidated_country", "year"))
GTD_polity_PENN_PRIO_WGI_WVS_Fragility_WDI_HIEF <- GTD_polity_PENN_PRIO_WGI_WVS_Fragility_WDI_HIEF %>% distinct()
# --- then we merge Vdem to GTD_polity_PENN_PRIO_WGI_WVS_Fragility_WDI_HIEF:
GTD_polity_PENN_PRIO_WGI_WVS_Fragility_WDI_HIEF_Vdem <- left_join(GTD_polity_PENN_PRIO_WGI_WVS_Fragility_WDI_HIEF, Vdem, by = c("consolidated_country", "year"))
# --- then we merge ELRF to GTD_polity_PENN_PRIO_WGI_WVS_Fragility_WDI_HIEF_Vdem:
GTD_polity_PENN_PRIO_WGI_WVS_Fragility_WDI_HIEF_Vdem_ELRF <- left_join(GTD_polity_PENN_PRIO_WGI_WVS_Fragility_WDI_HIEF_Vdem, ELRF, by = c("consolidated_country"))
# --- then we merge Gallup to GTD_polity_PENN_PRIO_WGI_WVS_Fragility_WDI_HIEF_Vdem_ELRF:
GTD_polity_PENN_PRIO_WGI_WVS_Fragility_WDI_HIEF_Vdem_ELRF_Gallup <- left_join(GTD_polity_PENN_PRIO_WGI_WVS_Fragility_WDI_HIEF_Vdem_ELRF, Gallup, by = c("consolidated_country"))
# --- then we merge IMF to GTD_polity_PENN_PRIO_WGI_WVS_Fragility_WDI_HIEF_Vdem_ELRF_Gallup:
# year is character, it should be numeric for the join
IMF <- IMF %>%
mutate(year=as.numeric(year), tax_revenue=as.numeric(tax_revenue))
GTD_polity_PENN_PRIO_WGI_WVS_Fragility_WDI_HIEF_Vdem_ELRF_Gallup_IMF <- left_join(GTD_polity_PENN_PRIO_WGI_WVS_Fragility_WDI_HIEF_Vdem_ELRF_Gallup, IMF, by = c("consolidated_country", "year"))
# --- then we merge WHIV to GTD_polity_PENN_PRIO_WGI_WVS_Fragility_WDI_HIEF_Vdem_ELRF_Gallup_IMF:
GTD_polity_PENN_PRIO_WGI_WVS_Fragility_WDI_HIEF_Vdem_ELRF_Gallup_IMF_WHIV <- left_join(GTD_polity_PENN_PRIO_WGI_WVS_Fragility_WDI_HIEF_Vdem_ELRF_Gallup_IMF, WHIV, by = c("consolidated_country", "year"))
# --- then we merge IGM to GTD_polity_PENN_PRIO_WGI_WVS_Fragility_WDI_HIEF_Vdem_ELRF_Gallup_IMF_WHIV:
GTD_polity_PENN_PRIO_WGI_WVS_Fragility_WDI_HIEF_Vdem_ELRF_Gallup_IMF_WHIV_IGM <- left_join(GTD_polity_PENN_PRIO_WGI_WVS_Fragility_WDI_HIEF_Vdem_ELRF_Gallup_IMF_WHIV, IGM, by = c("consolidated_country"))
# --- then we merge QoG timeseries to GTD_polity_PENN_PRIO_WGI_WVS_Fragility_WDI_HIEF_Vdem_ELRF_Gallup_IMF_WHIF_IGM to build:
LEGTER_ts <- left_join(GTD_polity_PENN_PRIO_WGI_WVS_Fragility_WDI_HIEF_Vdem_ELRF_Gallup_IMF_WHIV_IGM, QoG_ts, by = c("consolidated_country", "year"))
distinct(LEGTER_ts)
duplicated(LEGTER_ts)
LEGTER_ts[!duplicated(LEGTER_ts), ]
View(GTD_polity_PENN_PRIO_WGI_WVS_Fragility_WDI_HIEF_Vdem_ELRF)
duplicated(LEGTER_ts)
LEGTER_ts[duplicated(LEGTER_ts)]
?distinct
LEGTER_ts_d <- LEGTER_ts %>%
distinct(year, consolidated_country, .keep_all= TRUE)
LEGTER_ts <- LEGTER_ts_input %>%
distinct(year, consolidated_country, .keep_all= TRUE)
# --- then we merge QoG timeseries to GTD_polity_PENN_PRIO_WGI_WVS_Fragility_WDI_HIEF_Vdem_ELRF_Gallup_IMF_WHIF_IGM to build:
LEGTER_ts_input <- left_join(GTD_polity_PENN_PRIO_WGI_WVS_Fragility_WDI_HIEF_Vdem_ELRF_Gallup_IMF_WHIV_IGM, QoG_ts, by = c("consolidated_country", "year"))
LEGTER_ts <- LEGTER_ts_input %>%
distinct(year, consolidated_country, .keep_all= TRUE)
# --- then we merge QoG cross-sectional to GTD_polity_PENN_PRIO_WGI_WVS_Fragility_WDI_HIEF_Vdem_ELRF_Gallup_IMF_WHIF_IGM to build:
LEGTER_cs_input <- left_join(GTD_polity_PENN_PRIO_WGI_WVS_Fragility_WDI_HIEF_Vdem_ELRF_Gallup_IMF_WHIV_IGM, QoG_cs, by = c("consolidated_country"))
LEGTER_cs <- LEGTER_cs_input %>%
distinct(year, consolidated_country, .keep_all= TRUE)
saveRDS(LEGTER_ts, file = "../../Data/Data for Modelling/LEGTER_ts.rds")
saveRDS(LEGTER_cs, file = "../../Data/Data for Modelling/LEGTER_cs.rds")
LEGTER_ts <-  readRDS("../../Data/Data for Modelling/LEGTER_ts.rds")
write.dta(LEGTER_ts, file = "../../Data/Data for Modelling/LEGTER_ts.dta" )
LEGTER_cs <-  readRDS("../../Data/Data for Modelling/LEGTER_cs.rds")
write.dta(LEGTER_cs, file = "../../Data/Data for Modelling/LEGTER_cs.dta" )
library(foreign)
LEGTER_ts <-  readRDS("../../Data/Data for Modelling/LEGTER_ts.rds")
write.dta(LEGTER_ts, file = "../../Data/Data for Modelling/LEGTER_ts.dta" )
LEGTER_cs <-  readRDS("../../Data/Data for Modelling/LEGTER_cs.rds")
write.dta(LEGTER_cs, file = "../../Data/Data for Modelling/LEGTER_cs.dta" )
