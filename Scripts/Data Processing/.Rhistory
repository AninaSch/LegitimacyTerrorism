arrange(country, year)
GTD_clean_domestictarget <- GTD_clean %>%
filter(location_nationality == 0) %>%
count(year, country, name = n_domtarg_events) %>%
arrange(country, year)
View(GTD_clean_domestictarget)
GTD_clean_events <- GTD_clean %>% # we sum the number of event by country and year:
count(year, country, name = "n_events") %>%
# group_by(year, country) %>%
# summarise(n_events = sum(n, na.rm = TRUE)) %>%
arrange(country, year)
GTD_clean_domesticperpetrator <- GTD_clean %>%
filter(nationality_location == 0) %>%
count(year, country, name = "n_domperp_events") %>%
arrange(country, year)
GTD_clean_domestictarget <- GTD_clean %>%
filter(location_nationality == 0) %>%
count(year, country, name = "n_domtarg_events") %>%
arrange(country, year)
View(GTD_clean_domestictarget)
# merge all 3 in one dataset:
GTD_clean <- left_join(GTD_clean_events, GTD_clean_domesticperpetrator)
View(GTD_clean)
View(GTD_clean)
GTD_clean <- left_join(GTD_clean, GTD_clean_domestictarget)
View(GTD_clean)
# create "structure" data frame with all the year and country combinations:
countries = GTD_clean %>% filter(year > 1999) %>% .$country %>% unique() %>% rep(18)
years = rep(c(2000:2017), 167) %>% sort()
GTD_struct <- data.frame(
year = years,
country = countries
)
GTD_struct <- GTD_struct %>%
filter(country != "East Timor", country!= "Montenegro", country != "Kosovo", country != "South Sudan",
country != "Sudan", country !="Serbia", country != "Serbia-Montenegro")
GTD_struct <- GTD_struct %>%
filter(country != "East Timor", country!= "Montenegro", country != "Kosovo", country != "South Sudan",
country != "Sudan", country !="Serbia", country != "Serbia-Montenegro")
# We merge GTD_clean and GTD_tidy to get the number of events:
# It is a left join, to get n_events only where and when there were events:
GTD_tidy <- left_join(GTD_struct, GTD_clean, by = c("year", "country")) %>%
arrange(country, year) %>% # just easier to read
replace_na(list("n_events" = 0, "n_domperp_events" = 0, "n_domtarg_events" = 0)) # replace missing values in year/coutry for n_events by 0.
print("tidy and merging done")
View(GTD_tidy)
# create "structure" data frame with all the year and country combinations:
countries = GTD_clean %>% filter(year > 1999) %>% .$country %>% unique() %>% rep(18)
years = rep(c(2000:2017), 167) %>% sort()
GTD_struct <- data.frame(
year = years,
country = countries
)
GTD_struct <- GTD_struct %>%
filter(country != "East Timor", country!= "Montenegro", country != "Kosovo", country != "South Sudan",
country != "Sudan", country !="Serbia", country != "Serbia-Montenegro",
country != "International")
# We merge GTD_clean and GTD_tidy to get the number of events:
# It is a left join, to get n_events only where and when there were events:
GTD_tidy <- left_join(GTD_struct, GTD_clean, by = c("year", "country")) %>%
arrange(country, year) %>% # just easier to read
replace_na(list("n_events" = 0, "n_domperp_events" = 0, "n_domtarg_events" = 0)) # replace missing values in year/coutry for n_events by 0.
print("tidy and merging done")
View(GTD_tidy)
#     4. Add binary variable if there was any event (one or more) in a given country/year
GTD_tidy <- GTD_tidy %>%
mutate(had_events = ifelse(n_events != 0, 1, 0))
# drop levels of deleted countries:
levels(droplevels(GTD_tidy$country))
setwd("~/Documents/GitHub/LegitimacyTerrorism/Scripts/Data Processing")
#       0. setup
library(rio) # to import and export data
library(tidyverse) # data wrangling etc.
setwd("~/Documents/GitHub/LegitimacyTerrorism/Scripts/Data Processing")
# --- 1. tidy GTD:
source("Functions to Tidy Data/tidy_GTD.R")
path_loadoriginal = "../../Data/Original Data/GTD/globalterrorismdb_0718dist.xlsx" # path to original data
path_savetidy = "../../Data/Processed Data/GTD_tidy.rds"
tidy_GTD(path_loadoriginal, path_savetidy) # import original, clean, tidy, save in processed data
setwd("~/Documents/GitHub/LegitimacyTerrorism/Scripts/Data Processing")
library(tidyverse)
source("Other functions/clean_countries.R") # function to clean country names
GTD <- readRDS("../../Data/Processed Data/GTD_tidy.rds")
polity <- readRDS("../../Data/Processed Data/polity_tidy.rds")
PENN <- readRDS("../../Data/Processed Data/PENN_tidy.rds")
PRIO <- readRDS("../../Data/Processed Data/Prio_tidy.rds")
WGI <- readRDS("../../Data/Processed Data/WGI_tidy.rds")
path_to_country_dictionary = "../../Data/Processed Data/To Clean Countries/countries.csv"
GTD <- clean_countries(GTD, path_to_country_dictionary)
polity <- clean_countries(polity, path_to_country_dictionary)
PENN <- clean_countries(PENN, path_to_country_dictionary)
PRIO <- clean_countries(PRIO, path_to_country_dictionary)
WGI <- clean_countries(WGI, path_to_country_dictionary)
# --- we start by merging polity to GTD:
# we do an left join, as we do not want countries that are not in the GTD (true? we could also set n_events to 0 for those?)
GTD_polity <- left_join(GTD, polity, by = c("consolidated_country", "year")) %>%
arrange(consolidated_country) # set order by country, for aesthetics and readability
View(GTD_polity)
# --- then we merge PENN to GTD_polity:
GTD_polity_PENN <- left_join(GTD_polity, PENN, by = c("consolidated_country", "year"))
# --- then we merge PRIO to GTD_polity_PENN:
GTD_polity_PENN_PRIO <- left_join(GTD_polity_PENN, PRIO, by = c("consolidated_country", "year"))
# because PRIO has only countries in wars, we need to complete the missing values with 0:
GTD_polity_PENN_PRIO <- GTD_polity_PENN_PRIO %>%
replace_na(list(type_of_conflict_1=0, type_of_conflict_2=0,
type_of_conflict_3=0, type_of_conflict_4=0, any_conflict=0))
# --- then we merge WGI to GTD_polity_PENN_PRIO:
GTD_polity_PENN_PRIO_WGI <- left_join(GTD_polity_PENN_PRIO, WGI, by = c("consolidated_country", "year"))
# some duplicate were created, because in some datasets, some year-country combinations happen twice
GTD_polity_PENN_PRIO_WGI <- GTD_polity_PENN_PRIO_WGI %>% distinct()
# take years after 2000: (quick dirty fix for the temporary countries):
GTD_polity_PENN_PRIO_WGI <- GTD_polity_PENN_PRIO_WGI %>%
filter(year > 1999)
View(GTD_polity_PENN_PRIO_WGI)
source('~/Documents/GitHub/LegitimacyTerrorism/Scripts/Data Processing/merge_datasets.R', echo=TRUE)
View(GTD_polity_PENN_PRIO_WGI)
setwd("~/Documents/GitHub/LegitimacyTerrorism/Scripts/Data Processing")
#       0. setup
library(rio) # to import and export data
library(tidyverse) # data wrangling etc.
# --- 1. tidy GTD:
source("Functions to Tidy Data/tidy_GTD.R")
View(tidy_GTD)
View(tidy_GTD)
library(tidyverse)
library(pglm) # model panel data
library(pscl)
library(lme4) # models longitudinal data within a Generalized Linear Mixed Model (GLMM) framework,
# Note that glmer implements random, rather than fixed effects.
# If you're attempting inference and want to control for all cross-sectional heterogeneity, glmer won't get you there. You'd need some implementation of the conditional logit model
library(robustHD) # data standardization
library(Hmisc)
library(stargazer) # Well-Formatted Regression and Summary Statistics Tables
library(lmtest) # for coefplot
library(sjPlot)
library(sjmisc)
library(sjlabelled)
my_data <- readRDS("../../Data/Data for Modelling/GTD_polity_PENN_PRIO_WGI_2000.rds")
View(my_data)
header(my_data)
glmpse(my_data)
glimpse(my_data)
my_dataWGI <- my_data %>%
select(accountability,corruption,effectiveness,quality,rule_of_law)
View(my_dataWGI)
# Maximum Likelihood Factor Analysis
# entering raw data and extracting 3 factors,
# with varimax rotation
fit <- factanal(my_dataWGI, 3, rotation="varimax")
summary(my_dataWGI)
?factanal
# Maximum Likelihood Factor Analysis
# entering raw data and extracting 3 factors,
# with varimax rotation
fit <- factanal(na.omit(my_dataWGI), 3, rotation="varimax")
# Maximum Likelihood Factor Analysis
# entering raw data and extracting 3 factors,
# with varimax rotation
fit <- factanal(na.omit(my_dataWGI), 1, rotation="varimax")
print(fit, digits=2, cutoff=.3, sort=TRUE)
# Maximum Likelihood Factor Analysis
# entering raw data and extracting 3 factors,
# with varimax rotation
fit <- factanal(na.omit(my_dataWGI), 2, rotation="varimax")
print(fit, digits=2, cutoff=.3, sort=TRUE)
# Principal Axis Factor Analysis
library(psych)
fit <- factor.pa(my_dataWGI, nfactors=2, rotation="varimax")
fit <- factor.pa(my_dataWGI, nfactors=3, rotation="varimax")
fit <- factor.pa(my_dataWGI, nfactors=3, rotation="promax")
# Determine Number of Factors to Extract
library(nFactors)
# Principal Axis Factor Analysis
library(psych)
# Determine Number of Factors to Extract
library(nFactors)
install.packages("nFactors")
# Determine Number of Factors to Extract
library(nFactors)
ev <- eigen(cor(mydata)) # get eigenvalues
# Determine Number of Factors to Extract
library(nFactors)
# Determine Number of Factors to Extract
library(nFactors)
ev <- eigen(cor(my_dataWGI)) # get eigenvalues
ev <- eigen(cor(my_dataWGI, use = "complete.obs")) # get eigenvalues
ap <- parallel(subject=nrow(my_dataWGI),var=ncol(my_dataWGI),
rep=100,cent=.05)
nS <- nScree(x=ev$values, aparallel=ap$eigen$qevpea)
View(nS)
plotnScree(nS)
library(tidyverse)
library(pglm) # model panel data
library(pscl)
library(lme4) # models longitudinal data within a Generalized Linear Mixed Model (GLMM) framework,
# Note that glmer implements random, rather than fixed effects.
# If you're attempting inference and want to control for all cross-sectional heterogeneity, glmer won't get you there. You'd need some implementation of the conditional logit model
library(robustHD) # data standardization
library(Hmisc)
library(stargazer) # Well-Formatted Regression and Summary Statistics Tables
library(lmtest) # for coefplot
library(sjPlot)
library(sjmisc)
library(sjlabelled)
my_data <- readRDS("../../Data/Data for Modelling/GTD_polity_PENN_PRIO_WGI_2000.rds")
View(my_data)
glimpse(my_data)
pnbacc <- pglm(n_events ~ accountability +
lag(log(GDP_expentiture)) + lag(log(pop)) + lag(any_conflict) + lag(durable),
my_data,
family = negbin, model = "within", print.level = 3, method = "nr",
index = c('consolidated_country', 'year'),
start = NULL, R = 20 )
summary(pnbacc)
pnbacc <- pglm(n_events ~ accountability +
(log(GDP_expentiture)) + (log(pop)) + (any_conflict) + (durable),
my_data,
family = negbin, model = "within", print.level = 3, method = "nr",
index = c('consolidated_country', 'year'),
start = NULL, R = 20 )
View(my_data)
pnbacc <- pglm(n_events ~
lag(log(GDP_expentiture)) + lag(log(pop)) + lag(any_conflict) + lag(durable),
my_data,
family = negbin, model = "within", print.level = 3, method = "nr",
index = c('consolidated_country', 'year'),
start = NULL, R = 20 )
pnbacc <- pglm(n_events ~ accountability +
lag(log(GDP_expentiture)) + lag(log(pop)),
my_data,
family = negbin, model = "within", print.level = 3, method = "nr",
index = c('consolidated_country', 'year'),
start = NULL, R = 20 )
summary(pnbacc)
pnbacc <- pglm(n_events ~ accountability +
lag(log(GDP_expentiture)) + lag(log(pop)) + lag(any_conflict),
my_data,
family = negbin, model = "within", print.level = 3, method = "nr",
index = c('consolidated_country', 'year'),
start = NULL, R = 20 )
pnbacc <- pglm(n_events ~ accountability +
lag(log(GDP_expentiture)) + lag(log(pop)) + lag(durable),
my_data,
family = negbin, model = "within", print.level = 3, method = "nr",
index = c('consolidated_country', 'year'),
start = NULL, R = 20 )
summary(pnbacc)
summary(GTD$any_conflict)
summary(my_data$any_conflict)
table(my_data$any_conflict)
# CORRUPTION
pnbcorr <- pglm(n_events ~ lag(corruption) +
lag(log(GDP_expentiture)) + lag(log(pop)) + lag(any_conflict) + lag(durable),
my_data,
family = negbin, model = "within", print.level = 3, method = "nr",
index = c('consolidated_country', 'year'),
start = NULL, R = 20 )
summary(pnbcorr)
pnbcorr <- pglm(n_events ~ lag(corruption) +
lag(log(GDP_expentiture)) + lag(log(pop))  + lag(durable),
my_data,
family = negbin, model = "within", print.level = 3, method = "nr",
index = c('consolidated_country', 'year'),
start = NULL, R = 20 )
summary(pnbcorr)
pnbeff <- pglm(n_events ~ lag(effectiveness) +
lag(log(GDP_expentiture)) + lag(log(pop))  + lag(durable),
my_data,
family = negbin, model = "within", print.level = 3, method = "nr",
index = c('consolidated_country', 'year'),
start = NULL, R = 20 )
summary(pnbeff)
# RULE OF LAW
pnbrul <- pglm(n_events ~ lag(rule_of_law) +
lag(log(GDP_expentiture)) + lag(log(pop)) + lag(any_conflict) + lag(durable),
my_data,
family = negbin, model = "within", print.level = 3, method = "nr",
index = c('consolidated_country', 'year'),
start = NULL, R = 20 )
summary(pnbrul)
table(my_data$any_conflict)
?pglm
pnbacc <- pglm(n_events ~ accountability +
lag(log(GDP_expentiture)) + lag(log(pop)) + lag(any_conflict) + lag(durable),
my_data,
family = negbin, model = "random", print.level = 3, method = "nr",
index = c('consolidated_country', 'year'),
start = NULL, R = 20 )
summary(pnbacc)
pnbacc <- pglm(n_events ~ accountability +
lag(log(GDP_expentiture)) + lag(log(pop)) + lag(any_conflict) + lag(durable),
my_data,
family = negbin, model = "within", print.level = 3, method = "nr",
index = c('consolidated_country', 'year'),
start = NULL, R = 20 )
pnbacc <- pglm(n_events ~ accountability +
lag(log(GDP_expentiture)) + lag(log(pop)) + lag(durable),
my_data,
family = negbin, model = "within", print.level = 3, method = "nr",
index = c('consolidated_country', 'year'),
start = NULL, R = 20 )
summary(pnbacc)
pnbacc <- pglm(n_events ~ accountability +
lag(log(GDP_expentiture))  + lag(any_conflict) + lag(durable),
my_data,
family = negbin, model = "within", print.level = 3, method = "nr",
index = c('consolidated_country', 'year'),
start = NULL, R = 20 )
summary(pnbacc)
setwd("~/Documents/GitHub/LegitimacyTerrorism/Scripts/Data Processing")
library(tidyverse)
library(foreign)
source("Other functions/clean_countries.R") # function to clean country names
GTD <- readRDS("../../Data/Processed Data/GTD_tidy.rds")
polity <- readRDS("../../Data/Processed Data/polity_tidy.rds")
PENN <- readRDS("../../Data/Processed Data/PENN_tidy.rds")
PRIO <- readRDS("../../Data/Processed Data/Prio_tidy.rds")
WGI <- readRDS("../../Data/Processed Data/WGI_tidy.rds")
path_to_country_dictionary = "../../Data/Processed Data/To Clean Countries/countries.csv"
GTD <- clean_countries(GTD, path_to_country_dictionary)
polity <- clean_countries(polity, path_to_country_dictionary)
PENN <- clean_countries(PENN, path_to_country_dictionary)
PRIO <- clean_countries(PRIO, path_to_country_dictionary)
WGI <- clean_countries(WGI, path_to_country_dictionary)
# --- we start by merging polity to GTD:
# we do an left join, as we do not want countries that are not in the GTD (true? we could also set n_events to 0 for those?)
GTD_polity <- left_join(GTD, polity, by = c("consolidated_country", "year")) %>%
arrange(consolidated_country) # set order by country, for aesthetics and readability
# --- then we merge PENN to GTD_polity:
GTD_polity_PENN <- left_join(GTD_polity, PENN, by = c("consolidated_country", "year"))
# --- then we merge PRIO to GTD_polity_PENN:
GTD_polity_PENN_PRIO <- left_join(GTD_polity_PENN, PRIO, by = c("consolidated_country", "year"))
# because PRIO has only countries in wars, we need to complete the missing values with 0:
GTD_polity_PENN_PRIO <- GTD_polity_PENN_PRIO %>%
replace_na(list(type_of_conflict_1=0, type_of_conflict_2=0,
type_of_conflict_3=0, type_of_conflict_4=0, any_conflict=0))
# --- then we merge WGI to GTD_polity_PENN_PRIO:
GTD_polity_PENN_PRIO_WGI <- left_join(GTD_polity_PENN_PRIO, WGI, by = c("consolidated_country", "year"))
# some duplicate were created, because in some datasets, some year-country combinations happen twice
GTD_polity_PENN_PRIO_WGI <- GTD_polity_PENN_PRIO_WGI %>% distinct()
library(tidyverse)
library(foreign)
source("Other functions/clean_countries.R") # function to clean country names
GTD <- readRDS("../../Data/Processed Data/GTD_tidy.rds")
polity <- readRDS("../../Data/Processed Data/polity_tidy.rds")
PENN <- readRDS("../../Data/Processed Data/PENN_tidy.rds")
PRIO <- readRDS("../../Data/Processed Data/Prio_tidy.rds")
WGI <- readRDS("../../Data/Processed Data/WGI_tidy.rds")
path_to_country_dictionary = "../../Data/Processed Data/To Clean Countries/countries.csv"
GTD <- clean_countries(GTD, path_to_country_dictionary)
polity <- clean_countries(polity, path_to_country_dictionary)
PENN <- clean_countries(PENN, path_to_country_dictionary)
PRIO <- clean_countries(PRIO, path_to_country_dictionary)
WGI <- clean_countries(WGI, path_to_country_dictionary)
# --- we start by merging polity to GTD:
# we do an left join, as we do not want countries that are not in the GTD (true? we could also set n_events to 0 for those?)
GTD_polity <- left_join(GTD, polity, by = c("consolidated_country", "year")) %>%
arrange(consolidated_country) # set order by country, for aesthetics and readability
View(GTD)
setwd("~/Documents/GitHub/LegitimacyTerrorism/Scripts/Data Processing")
library(tidyverse)
library(foreign)
source("Other functions/clean_countries.R") # function to clean country names
View(clean_countries)
View(clean_countries)
GTD <- readRDS("../../Data/Processed Data/GTD_tidy.rds")
polity <- readRDS("../../Data/Processed Data/polity_tidy.rds")
PENN <- readRDS("../../Data/Processed Data/PENN_tidy.rds")
PRIO <- readRDS("../../Data/Processed Data/Prio_tidy.rds")
WGI <- readRDS("../../Data/Processed Data/WGI_tidy.rds")
View(GTD)
path_to_country_dictionary = "../../Data/Processed Data/To Clean Countries/countries.csv"
GTD <- clean_countries(GTD, path_to_country_dictionary)
path_to_country_dictionary = "../../Data/Processed Data/To Clean Countries/countries.csv"
GTD <- clean_countries(GTD, path_to_country_dictionary)
GTD <- clean_countries(GTD, path_to_country_dictionary)
GTD <- clean_countries(GTD, path_to_country_dictionary)
setwd("~/Documents/GitHub/LegitimacyTerrorism/Scripts/Data Processing")
GTD <- readRDS("../../Data/Processed Data/GTD_tidy.rds")
polity <- readRDS("../../Data/Processed Data/polity_tidy.rds")
PENN <- readRDS("../../Data/Processed Data/PENN_tidy.rds")
PRIO <- readRDS("../../Data/Processed Data/Prio_tidy.rds")
WGI <- readRDS("../../Data/Processed Data/WGI_tidy.rds")
path_to_country_dictionary = "../../Data/Processed Data/To Clean Countries/countries.csv"
GTD <- clean_countries(GTD, path_to_country_dictionary)
View(GTD)
polity <- clean_countries(polity, path_to_country_dictionary)
path_to_country_dictionary = "../../Data/Processed Data/To Clean Countries/countries.csv"
source("Other functions/clean_countries.R") # function to clean country names
GTD <- clean_countries(GTD, path_to_country_dictionary)
View(GTD)
library(tidyverse)
library(foreign)
source("Other functions/clean_countries.R") # function to clean country names
GTD <- readRDS("../../Data/Processed Data/GTD_tidy.rds")
polity <- readRDS("../../Data/Processed Data/polity_tidy.rds")
PENN <- readRDS("../../Data/Processed Data/PENN_tidy.rds")
PRIO <- readRDS("../../Data/Processed Data/Prio_tidy.rds")
WGI <- readRDS("../../Data/Processed Data/WGI_tidy.rds")
path_to_country_dictionary = "../../Data/Processed Data/To Clean Countries/countries.csv"
GTD <- clean_countries(GTD, path_to_country_dictionary)
library(tidyverse)
source("Other functions/clean_countries.R") # function to clean country names
GTD <- readRDS("../../Data/Processed Data/GTD_tidy.rds")
polity <- readRDS("../../Data/Processed Data/polity_tidy.rds")
PENN <- readRDS("../../Data/Processed Data/PENN_tidy.rds")
PRIO <- readRDS("../../Data/Processed Data/Prio_tidy.rds")
WGI <- readRDS("../../Data/Processed Data/WGI_tidy.rds")
path_to_country_dictionary = "../../Data/Processed Data/To Clean Countries/countries.csv"
GTD <- clean_countries(GTD, path_to_country_dictionary)
library(foreign)
library(tidyverse)
GTD_polity_PENN_PRIO_WGI <- readRDS("../../Data/Data for Modelling/GTD_polity_PENN_PRIO_WGI_2000.rds")
write.dta(GTD_polity_PENN_PRIO_WGI,  file = "../../Data/Data for Modelling/GTD_polity_PENN_PRIO_WGI_2000.dta")
setwd("~/Documents/GitHub/LegitimacyTerrorism/Scripts/Data Processing")
library(tidyverse)
source("Other functions/clean_countries.R") # function to clean country names
GTD <- readRDS("../../Data/Processed Data/GTD_tidy.rds")
polity <- readRDS("../../Data/Processed Data/polity_tidy.rds")
PENN <- readRDS("../../Data/Processed Data/PENN_tidy.rds")
PRIO <- readRDS("../../Data/Processed Data/Prio_tidy.rds")
WGI <- readRDS("../../Data/Processed Data/WGI_tidy.rds")
path_to_country_dictionary = "../../Data/Processed Data/To Clean Countries/countries.csv"
GTD <- clean_countries(GTD, path_to_country_dictionary)
source("Other functions/clean_countries.R") # function to clean country names
path_to_country_dictionary = "../../Data/Processed Data/To Clean Countries/countries.csv"
GTD <- clean_countries(GTD, path_to_country_dictionary)
View(GTD)
source("Other functions/clean_countries.R") # function to clean country names
GTD <- readRDS("../../Data/Processed Data/GTD_tidy.rds")
polity <- readRDS("../../Data/Processed Data/polity_tidy.rds")
PENN <- readRDS("../../Data/Processed Data/PENN_tidy.rds")
PRIO <- readRDS("../../Data/Processed Data/Prio_tidy.rds")
WGI <- readRDS("../../Data/Processed Data/WGI_tidy.rds")
path_to_country_dictionary = "../../Data/Processed Data/To Clean Countries/countries.csv"
GTD <- clean_countries(GTD, path_to_country_dictionary)
sour<ce("Other functions/clean_countries.R") # function to clean country names
source("Other functions/clean_countries.R") # function to clean country names
GTD <- readRDS("../../Data/Processed Data/GTD_tidy.rds")
polity <- readRDS("../../Data/Processed Data/polity_tidy.rds")
PENN <- readRDS("../../Data/Processed Data/PENN_tidy.rds")
PRIO <- readRDS("../../Data/Processed Data/Prio_tidy.rds")
WGI <- readRDS("../../Data/Processed Data/WGI_tidy.rds")
path_to_country_dictionary = "../../Data/Processed Data/To Clean Countries/countries.csv"
GTD <- clean_countries(GTD, path_to_country_dictionary)
library(tidyverse)
source("Other functions/clean_countries.R") # function to clean country names
GTD <- readRDS("../../Data/Processed Data/GTD_tidy.rds")
polity <- readRDS("../../Data/Processed Data/polity_tidy.rds")
PENN <- readRDS("../../Data/Processed Data/PENN_tidy.rds")
PRIO <- readRDS("../../Data/Processed Data/Prio_tidy.rds")
WGI <- readRDS("../../Data/Processed Data/WGI_tidy.rds")
path_to_country_dictionary = "../../Data/Processed Data/To Clean Countries/countries.csv"
GTD <- clean_countries(GTD, path_to_country_dictionary)
?select
source("Other functions/clean_countries.R") # function to clean country names
GTD <- readRDS("../../Data/Processed Data/GTD_tidy.rds")
polity <- readRDS("../../Data/Processed Data/polity_tidy.rds")
PENN <- readRDS("../../Data/Processed Data/PENN_tidy.rds")
PRIO <- readRDS("../../Data/Processed Data/Prio_tidy.rds")
WGI <- readRDS("../../Data/Processed Data/WGI_tidy.rds")
path_to_country_dictionary = "../../Data/Processed Data/To Clean Countries/countries.csv"
GTD <- clean_countries(GTD, path_to_country_dictionary)
source("Other functions/clean_countries.R") # function to clean country names
GTD <- readRDS("../../Data/Processed Data/GTD_tidy.rds")
polity <- readRDS("../../Data/Processed Data/polity_tidy.rds")
PENN <- readRDS("../../Data/Processed Data/PENN_tidy.rds")
PRIO <- readRDS("../../Data/Processed Data/Prio_tidy.rds")
WGI <- readRDS("../../Data/Processed Data/WGI_tidy.rds")
path_to_country_dictionary = "../../Data/Processed Data/To Clean Countries/countries.csv"
GTD <- clean_countries(GTD, path_to_country_dictionary)
View(GTD)
source("Other functions/clean_countries.R") # function to clean country names
GTD <- readRDS("../../Data/Processed Data/GTD_tidy.rds")
polity <- readRDS("../../Data/Processed Data/polity_tidy.rds")
PENN <- readRDS("../../Data/Processed Data/PENN_tidy.rds")
PRIO <- readRDS("../../Data/Processed Data/Prio_tidy.rds")
WGI <- readRDS("../../Data/Processed Data/WGI_tidy.rds")
path_to_country_dictionary = "../../Data/Processed Data/To Clean Countries/countries.csv"
GTD <- clean_countries(GTD, path_to_country_dictionary)
library(tidyverse)
source("Other functions/clean_countries.R") # function to clean country names
GTD <- readRDS("../../Data/Processed Data/GTD_tidy.rds")
polity <- readRDS("../../Data/Processed Data/polity_tidy.rds")
PENN <- readRDS("../../Data/Processed Data/PENN_tidy.rds")
PRIO <- readRDS("../../Data/Processed Data/Prio_tidy.rds")
WGI <- readRDS("../../Data/Processed Data/WGI_tidy.rds")
path_to_country_dictionary = "../../Data/Processed Data/To Clean Countries/countries.csv"
GTD <- clean_countries(GTD, path_to_country_dictionary)
polity <- clean_countries(polity, path_to_country_dictionary)
library(tidyverse)
source("Other functions/clean_countries.R") # function to clean country names
GTD <- readRDS("../../Data/Processed Data/GTD_tidy.rds")
polity <- readRDS("../../Data/Processed Data/polity_tidy.rds")
PENN <- readRDS("../../Data/Processed Data/PENN_tidy.rds")
PRIO <- readRDS("../../Data/Processed Data/Prio_tidy.rds")
WGI <- readRDS("../../Data/Processed Data/WGI_tidy.rds")
path_to_country_dictionary = "../../Data/Processed Data/To Clean Countries/countries.csv"
GTD <- clean_countries(GTD, path_to_country_dictionary)
library(tidyverse)
source("Other functions/clean_countries.R") # function to clean country names
GTD <- readRDS("../../Data/Processed Data/GTD_tidy.rds")
polity <- readRDS("../../Data/Processed Data/polity_tidy.rds")
PENN <- readRDS("../../Data/Processed Data/PENN_tidy.rds")
PRIO <- readRDS("../../Data/Processed Data/Prio_tidy.rds")
WGI <- readRDS("../../Data/Processed Data/WGI_tidy.rds")
path_to_country_dictionary = "../../Data/Processed Data/To Clean Countries/countries.csv"
GTD <- clean_countries(GTD, path_to_country_dictionary)
polity <- clean_countries(polity, path_to_country_dictionary)
PENN <- clean_countries(PENN, path_to_country_dictionary)
PRIO <- clean_countries(PRIO, path_to_country_dictionary)
View(GTD)
